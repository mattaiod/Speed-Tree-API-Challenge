<Salutations>
Bonjour, tu viens d'arriver sur un challenge qui selon ton niveau et ta chance, peut plus ou moins te challenger.
Quoiqu'il en soit, tu progresseras beaucoup avec cet exercice et tu apprendras s√ªrement des choses tr√®s int√©ressantes 
sur le javascript. Si ce n'est pas le cas, bravo, on peut dire que tu touches d√©j√† bien le javascript.

<Ennonc√©>
L'objectif est de parcourir un arbre (ici sous forme d'object dans la constante: objToTravel) en optimisant son parcours
afin de parcourir l'arbre sans jamais perdre de temps. A chaque key de objToTravel, on attendra le temps d√©fini
correspondant (selon son ordre d'arriv√©e) dans l'array tabTime: 
[10, 500, 2, 33, 4, 53, 5, 41, 343, 9, 4, 45, 2, 49, 1, 200, 10, 34, 23, 32]

Attention: Tu n'as le droit d'ajouter que du code dans la section "Functions To Implement" et "body". Il est interdit de supprimer
le code d√©j√† existant dans ces parties.

<R√©ussite>
=> Tu n'as pas trich√© et la console affiche "You are a winner ! üéâ".

-> La fonction te permettant de savoir si tu as r√©ussis est: amIAWinner(listOrderKeyWithTime, timeAllKeyWithoutOptimization)

- listOrderKeyWithTime est l'ordre d'optimisation de passage du tableau accompagn√© du temps de l'api associ√©.
r√©sultat attendu: l'array ci-dessous:
[
  ["A", 10],
  ["C", 2],
  ["E", 4],
  ["G", 5],
  ["D", 33],
  ["F", 53],
  ["J", 9],
  ["M", 4],
  ["H", 41],
  ["L", 1],
  ["Q", 2],
  ["P", 45],
  ["K", 49],
  ["N", 10],
  ["O", 34],
  ["R", 200],
  ["S", 23],
  ["I", 343],
  ["B", 500],
 ]

- timeAllKeyWithoutOptimization est le temps total de tous les call api avec toutes les keys si on les avait fait une par une en attendant √† chaque fois,
 ce temps doit √™tre incr√©ment√© √† chaque fois que la fonction callApi(timeApi) a termin√©. R√©sultat attendu:
1368



